MVC 모델 2를 이용한 게시판 만들기

1. 데이터베이스 구축(-> 테이블 생성, 시퀀스 생성) 					=> 완
2. 샘플 데이터 삽입과 확인(->commit)							=> 완
3. DBCP 셋팅												=> 완								
4. 각종 라이브러리(ojdbc,jstl) 								=> 완
5. DBManager객체를 제작(DB연결과 해제)							=> 완
6. VO객체 제작(데이터베이스 컬럼과 일치)							=> 완
7. DAO 객체를 제작(-> 싱글턴 패턴으로 제작)						=> 완
8. CSS 제작												=> 완
9. 모든 요청을 처리하기 위한 컨트롤러(서블릿) 제작					=> 완
   - 모든 요청을 처리하기 위한 서블릿(BoardServlet)
   - 각 요청과 그에 따른 로직처리를 연결 시켜줄 클래스(ActionFactory)
10. 요청 처리를 위한 클래스들을 하나의 메서드로 묶어줄 인터페이스 제작		=> 완
   - 인터페이스(Action)
----------------------------------------------------------------------------------
11. 모든 게시물 보기 기능(목록보기)								=> 완
   - DAO에 게시물 조회 기능 메서드 추가( selectAllBoard())
   - 기능처리를 위한 클래스  (command="board_list")
   - 화면을 보여 주기 위한 뷰(board/boardList.jsp)
----------------------------------------------------------------------------------
12. 글 등록 기능											=> 완
   - 폼으로 연결 시켜 주기 위한 클래스(command="board_write_form")
   - 폼을 보여주기 위한 뷰	(board/boardWrite.jsp)
   - DAO에 게시물 등록 메서드 추가( insertBoard(BoardVo bVo))
   - 게시물 등록 기능을 하기 위한 클래스(command="board_write")
----------------------------------------------------------------------------------
13. 글 상세보기												=>완
   - DAO 에 게시물 읽어오기+ 조회수 증가 메서드 추가
   	(selectBoardByNum(String num), updateReadCount(String num))
   - 글 제목 클릭시 상세보기 연결 (board/boardList.jsp)
   - 상세 보기 폼으로 연결 시켜줄 클래스(command="board_view")
   - 상세 보기을 위한 뷰(board/boardView.jsp)
----------------------------------------------------------------------------------
14. 글 수정/삭제 => 암호 확인									=>완
   - DAO 암호 체크 기능 메서드 추가(checkPassword(String num, String pass))
   - 암호 확인 페이지로 이동(새창 열기) => Javascript(window.open())
   - 암호 확인 폼으로 이동하기 위한 클래스(command=board_check_pass_form)
   - 암호 확인 폼을 보여주기 위한 뷰(board/boardCheckPass.jsp)
   - 암호 확인을 위한 클래스(command=board_check_pass)
   - 암호 성공시 보여주기 위한 뷰=> (board/checkSuccess.jsp=>수정/삭제)
----------------------------------------------------------------------------------
15. 글 삭제 기능											=>완
   - DAO 게시글 삭제 기능 메서드 추가(deleteBoard(String num))
   - 글 삭제 기능을 위한 클래스(command="board_delete")
   - 게시글 삭제 후 이동할 페이지(목록보기)
----------------------------------------------------------------------------------
16. 글 수정 기능											=>완
   - DAO 게시글 수정 기능 메시드 추가(UpdateBoard(BoardVO bVo))
   - 게시글 수정 폼으로 이동하기 위한 클래스(command="board_update_form")
   - 게시글 수정 폼을 보여주기 위한 뷰(board/boardUpdate.jsp)
   - 실제 게시글 수정을 처리하기 위한 클래스(command="board_update")
   - 수정후에는 이동할 페이지(목록 보기)
----------------------------------------------------------------------------------
17. 페이징 => 원하는 위치의 정해진 개수의 페이지를 보여주는 것이 목표

<<  1 2 3 4 5 6 7 8 9 10 >>      			=> 1번 섹션 (001 ~ 100)
    1  1~10
    2  11~20
    3  21~30  (페이지번호-1)*10+1~~(페이지번호)*10
    
<<  11 12 13 14 15 16 17 18 19 20 >>		=> 2번 섹션 (101 ~ 200)
<<  21 22 23 24 25 26 27 28 29 30 >>		=> 3번 섹션 (201 ~ 300)
    									(섹션번호-1)*100+1 ~ (섹션번호)*100
    									
     섹션번호 3, 	
	21  201~210 (섹션번호-1)*100+(페이지번호-1)*10+1~~(섹션번호-1)*100+(페이지번호)*10
    22  211~220 (섹션번호-1)*100+(페이지번호-1)*10+1~~(섹션번호-1)*100+(페이지번호)*10
    23  221~230 (섹션번호-1)*100+(페이지번호-1)*10+1~~(섹션번호-1)*100+(페이지번호)*10
	25  241~250 (섹션번호-1)*100+(페이지번호-1)*10+1~~(섹션번호-1)*100+(페이지번호)*10
	
	30  291~300 (섹션번호-1)*100+(페이지번호-1)*10+1~~(섹션번호-1)*100+(페이지번호)*10

  한 '페이지' 당 10개의 게시물
  한 '섹션'  당  100개의 게시물
  
   내가 확인하고자 하는 게시물 몇번 섹션에 몇번째 게시물인지??
   예 : 757번 게시물    8번 섹션(701 ~ 800)
  1. 섹션단위     (섹션번호-1)*100 
  2. 페이지 번호    6번 페이지
   
   // 쿼리를 어떻게 작성할 것인가?  오라클 : ROWNUM 행의 개수
   1단계 내림차순으로 전체 데이터 조회
    SELECT * FROM board ORDER BY num DESC
   
   2단계  1단계를 기준으로 행번호를 생성한 새로운 SELECT문 생성   => 정렬도 되고 전체 데이터를 대상으로 번호를 매기게 된다.
   SELECT ROWNUM as nick ,num, name, email, pass, title, content, readcount, writedate 
   FROM (SELECT * FROM board ORDER BY num DESC)
   
   3단계 전체 매겨진 행번호를 기준으로 섹션값과 페이지 번호를 이용해 페이지당 원하는 위치의 컬럼을 추출
   
   SELECT * FROM  ~~~
   WHERE nink BETWEEN (섹션번호-1)*100+(페이지번호-1)*10+1 AND (섹션번호-1)*100+(페이지번호)*10
   

------------------
==> DAO  전체 게시글 수, 섹션번호와 페이지번호를 통해서 현재 페이지 게시글 목록 읽어오기
==> 기능 클래스 BoardListAction 섹션번호와 페이지번호 전달 할수 있어야 한다.
==>  List페이지의 내용을 수정
